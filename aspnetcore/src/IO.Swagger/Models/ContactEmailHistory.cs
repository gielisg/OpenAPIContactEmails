/*
 * Contact Emails
 *
 * Manages the emails used to contact a Contact.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: gielisg@selectsoftware.com.au
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ContactEmailHistory : IEquatable<ContactEmailHistory>
    { 
        /// <summary>
        /// Id. of the Contact Email History item
        /// </summary>
        /// <value>Id. of the Contact Email History item</value>
        [DataMember(Name="Id")]
        public int? Id { get; set; }

        /// <summary>
        /// Gets or Sets EmailTypeCode
        /// </summary>
        [DataMember(Name="EmailTypeCode")]
        public string EmailTypeCode { get; set; }

        /// <summary>
        /// Name of the Email Type
        /// </summary>
        /// <value>Name of the Email Type</value>
        [DataMember(Name="EmailType")]
        public string EmailType { get; set; }

        /// <summary>
        /// The Email Address.
        /// </summary>
        /// <value>The Email Address.</value>
        [DataMember(Name="EmailAddress")]
        public string EmailAddress { get; set; }

        /// <summary>
        /// The start date time of a time period.
        /// </summary>
        /// <value>The start date time of a time period.</value>
        [DataMember(Name="FromDateTime")]
        public DateTime? FromDateTime { get; set; }

        /// <summary>
        /// The end date time of a time period.
        /// </summary>
        /// <value>The end date time of a time period.</value>
        [DataMember(Name="ToDateTime")]
        public DateTime? ToDateTime { get; set; }

        /// <summary>
        /// The User that created the entity.
        /// </summary>
        /// <value>The User that created the entity.</value>
        [DataMember(Name="CreatedBy")]
        public string CreatedBy { get; set; }

        /// <summary>
        /// The date the entity was created.
        /// </summary>
        /// <value>The date the entity was created.</value>
        [DataMember(Name="CreatedDateTime")]
        public DateTime? CreatedDateTime { get; set; }

        /// <summary>
        /// The User that last updated the entity.
        /// </summary>
        /// <value>The User that last updated the entity.</value>
        [DataMember(Name="LastUpdatedBy")]
        public string LastUpdatedBy { get; set; }

        /// <summary>
        /// The date the entity was last updated.
        /// </summary>
        /// <value>The date the entity was last updated.</value>
        [DataMember(Name="LastUpdatedDateTime")]
        public DateTime? LastUpdatedDateTime { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ContactEmailHistory {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  EmailTypeCode: ").Append(EmailTypeCode).Append("\n");
            sb.Append("  EmailType: ").Append(EmailType).Append("\n");
            sb.Append("  EmailAddress: ").Append(EmailAddress).Append("\n");
            sb.Append("  FromDateTime: ").Append(FromDateTime).Append("\n");
            sb.Append("  ToDateTime: ").Append(ToDateTime).Append("\n");
            sb.Append("  CreatedBy: ").Append(CreatedBy).Append("\n");
            sb.Append("  CreatedDateTime: ").Append(CreatedDateTime).Append("\n");
            sb.Append("  LastUpdatedBy: ").Append(LastUpdatedBy).Append("\n");
            sb.Append("  LastUpdatedDateTime: ").Append(LastUpdatedDateTime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ContactEmailHistory)obj);
        }

        /// <summary>
        /// Returns true if ContactEmailHistory instances are equal
        /// </summary>
        /// <param name="other">Instance of ContactEmailHistory to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ContactEmailHistory other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    EmailTypeCode == other.EmailTypeCode ||
                    EmailTypeCode != null &&
                    EmailTypeCode.Equals(other.EmailTypeCode)
                ) && 
                (
                    EmailType == other.EmailType ||
                    EmailType != null &&
                    EmailType.Equals(other.EmailType)
                ) && 
                (
                    EmailAddress == other.EmailAddress ||
                    EmailAddress != null &&
                    EmailAddress.Equals(other.EmailAddress)
                ) && 
                (
                    FromDateTime == other.FromDateTime ||
                    FromDateTime != null &&
                    FromDateTime.Equals(other.FromDateTime)
                ) && 
                (
                    ToDateTime == other.ToDateTime ||
                    ToDateTime != null &&
                    ToDateTime.Equals(other.ToDateTime)
                ) && 
                (
                    CreatedBy == other.CreatedBy ||
                    CreatedBy != null &&
                    CreatedBy.Equals(other.CreatedBy)
                ) && 
                (
                    CreatedDateTime == other.CreatedDateTime ||
                    CreatedDateTime != null &&
                    CreatedDateTime.Equals(other.CreatedDateTime)
                ) && 
                (
                    LastUpdatedBy == other.LastUpdatedBy ||
                    LastUpdatedBy != null &&
                    LastUpdatedBy.Equals(other.LastUpdatedBy)
                ) && 
                (
                    LastUpdatedDateTime == other.LastUpdatedDateTime ||
                    LastUpdatedDateTime != null &&
                    LastUpdatedDateTime.Equals(other.LastUpdatedDateTime)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (EmailTypeCode != null)
                    hashCode = hashCode * 59 + EmailTypeCode.GetHashCode();
                    if (EmailType != null)
                    hashCode = hashCode * 59 + EmailType.GetHashCode();
                    if (EmailAddress != null)
                    hashCode = hashCode * 59 + EmailAddress.GetHashCode();
                    if (FromDateTime != null)
                    hashCode = hashCode * 59 + FromDateTime.GetHashCode();
                    if (ToDateTime != null)
                    hashCode = hashCode * 59 + ToDateTime.GetHashCode();
                    if (CreatedBy != null)
                    hashCode = hashCode * 59 + CreatedBy.GetHashCode();
                    if (CreatedDateTime != null)
                    hashCode = hashCode * 59 + CreatedDateTime.GetHashCode();
                    if (LastUpdatedBy != null)
                    hashCode = hashCode * 59 + LastUpdatedBy.GetHashCode();
                    if (LastUpdatedDateTime != null)
                    hashCode = hashCode * 59 + LastUpdatedDateTime.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ContactEmailHistory left, ContactEmailHistory right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ContactEmailHistory left, ContactEmailHistory right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
